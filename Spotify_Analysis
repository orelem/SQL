# Analysis of a Spotify dataset. The code below was used to create a table within SQLite Studio, import the dataset, then query the data.
# Here is a link to the dataset used for this project: https://www.kaggle.com/datasets/equinxx/spotify-top-50-songs-in-2021

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

/*What are the top 5 tracks with the highest energy level?*/
SELECT artist_name, track_name, energy AS energy_level
FROM BIT_DB.Spotifydata
ORDER BY energy DESC
LIMIT 5;


/*How many tracks have a danceability score above 0.8?*/
SELECT COUNT(*)
FROM BIT_DB.Spotifydata
WHERE danceability > 0.8;


/*What is the average loudness for each time signature category?*/
SELECT AVG(loudness)
FROM BIT_DB.Spotifydata
GROUP BY time_signature;



/*Which song has the highest speechiness value?*/
SELECT track_name, artist_name
FROM BIT_DB.Spotifydata
ORDER BY speechiness
LIMIT 1;


/*Can we find a correlation between popularity and loudness?*/
SELECT ROUND(loudness) as loudness_level, AVG(popularity) as avg_popularity
FROM BIT_DB.Spotifydata
GROUP BY ROUND(loudness)
ORDER BY ROUND(loudness);


/*What is the most common key for tracks in the database?*/
SELECT AVG(song_key) AS most_common_key
FROM BIT_DB.Spotifydata
GROUP BY song_key
ORDER BY COUNT(song_key) DESC
LIMIT 1;


/*What's the average tempo of the top 20 most popular tracks?*/
SELECT AVG(tempo)
FROM BIT_DB.Spotifydata
WHERE ( 
    SELECT tempo 
    FROM BIT_DB.Spotifydata 
    ORDER BY popularity DESC 
    LIMIT 20
    );


/*Which artist has the most tracks with a high level of instrumentalness (above AVG)?*/
SELECT artist_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING instrumentalness > AVG(instrumentalness)
ORDER BY COUNT(track_name) DESC
LIMIT 1;


/*How many tracks are there in each key, and what is their average popularity?*/
SELECT song_key, COUNT(track_id), ROUND(AVG(popularity)) AS avg_popularity
FROM BIT_DB.Spotifydata
GROUP BY song_key;


/*What are the top 10 most lively tracks, and which artists made them?*/
SELECT track_name, artist_name
FROM BIT_DB.Spotifydata
ORDER BY liveness DESC
LIMIT 10;
